import os, sys, json, time
from begin_eject import ejector

# TODO: Can we use this assignment for storing data in the future??
# GLOABL_DATA = []

class starter:
  def __init__(self, open_file, port, ejection):
    self.python_version = sys.version
    if '.txt' in open_file:
      self.open_file = open_file
    else:
      raise Exception('.txt not in file for db to connect to')
    self.start_connection = ""
    self.est_connection = ""
    self.eject_type = ejection
    self.start_port = port
    self.warning_FOR_USER = ""

    self.eject = ejector(self.eject_type)
  
  def getConnection(self, start_connection=None):

    if os.path.exists('/home/runner/connection.txt'):
      if not '~[' in open('connection.txt','r').read():

        self.start_connection = "\n\n"+"-----------------\n"+"~[ DB_STATUS_STARTING_WITH_STATUS_1078 ]~"+"\n-----------------"
        self.est_connection = "\n\n"+f"~[ CONNECTION_{self.start_port} ]~"+"\n"+f"~[ CONNECTION_TO_SYSTEM_{os.name} ]~ "+" "+self.start_connection+" \n"

        self.warning_FOR_USER = "\n\n--THIS_MSG_WILL_BE_DELETED_AT_NEXT_APPLICATION_RUNTME--\n\n##-STATUS_CORRUPTED_WITH_NEW_STATUS_FIXED-##"
        with open(self.open_file,'w') as file:

          file.write('!!! PLEASE DO NOT EDIT THIS FILE !!!\n\n\n')
          file.write(self.est_connection)
          file.write(self.warning_FOR_USER)
          file.close()
        
        print('FIXING CORRUPTED FILES....')
        time.sleep(5)

        raise Exception("The file: connection.txt -- is corrupted @ syntax \"~[\"\nFIXED AT 6 SECONDS")

      if not ']~' in open('connection.txt','r').read():

        self.start_connection = "\n\n"+"-----------------\n"+"~[ DB_STATUS_STARTING_WITH_STATUS_1078 ]~"+"\n-----------------"
        self.est_connection = "\n\n"+f"~[ CONNECTION_{self.start_port} ]~"+"\n"+f"~[ CONNECTION_TO_SYSTEM_{os.name} ]~ "+" "+self.start_connection+" \n"

        self.warning_FOR_USER = "\n\n--THIS_MSG_WILL_BE_DELETED_AT_NEXT_APPLICATION_RUNTME--\n\n##-STATUS_CORRUPTED_WITH_NEW_STATUS_FIXED-##"
        with open(self.open_file,'w') as file:

          file.write('!!! PLEASE DO NOT EDIT THIS FILE !!!\n\n\n')
          file.write(self.est_connection)
          file.write(self.warning_FOR_USER)
          file.close()
        
        print('FIXING CORRUPTED FILES....')
        time.sleep(5)

        raise Exception("The file: connection.txt -- is corrupted @ syntax \"]~\"\nFIXED AT 6 SECONDS")

    if self.python_version > str(float(3.4)):
      if start_connection:
        self.start_connection = "\n\n"+"-----------------\n"+"~[ DB_STATUS_STARTING_WITH_STATUS_1078 ]~"+"\n-----------------"
        self.est_connection = "\n\n"+f"~[ CONNECTION_{self.start_port} ]~"+"\n"+f"~[ CONNECTION_TO_SYSTEM_{os.name} ]~ "+" "+self.start_connection+" \n"
        with open(self.open_file,'w') as file:

          file.write('!!! PLEASE DO NOT EDIT THIS FILE !!!\n\n\n')
          file.write(self.est_connection)
          file.close()
        self.eject.getPort('18080')
    else:
      raise Exception('Not python compatible')
  
  def startCaching(self):

    if self.python_version > str(float(3.4)):
      
      if 'sql' in open('eject_type_info.txt','r').read():
        self.est_connection="###CACHE_CONNECTION_DATA###\n\n#- This File Is The \"Catch File\" For All Data Being Transfered -#\n\n"+f" [#- Cache_Port_Opened_@_PORT:{self.start_port} -#]"+"\n\n"+f' [#- EJECTING_{self.eject_type} -#]'+'\n\n'
      else:
        self.est_connection="###CACHE_CONNECTION_DATA###\n\n#- This File Is The \"Catch File\" For All Data Being Transfered -#\n\n"+f" [#- Cache_Port_Opened_@_PORT:{self.start_port} -#]"
      with open('CACHE.txt','w') as file:
        file.write(self.est_connection)
        file.close()
  
  def startEjecting(self):

    if os.path.exists('/home/runner/connection.txt') and os.path.exists('/home/runner/eject_type_info.txt'):
      self.eject.enterPath(input('\nDirectory of .db file >> '),open('CACHE.txt','w'),self.est_connection)
